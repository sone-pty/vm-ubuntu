// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game/proto/entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2fproto_2fentry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2fproto_2fentry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2fproto_2fentry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2fproto_2fentry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2fproto_2fentry_2eproto;
namespace Entry {
class C2E_LoginRequest;
struct C2E_LoginRequestDefaultTypeInternal;
extern C2E_LoginRequestDefaultTypeInternal _C2E_LoginRequest_default_instance_;
class E2C_LoginResponse;
struct E2C_LoginResponseDefaultTypeInternal;
extern E2C_LoginResponseDefaultTypeInternal _E2C_LoginResponse_default_instance_;
}  // namespace Entry
PROTOBUF_NAMESPACE_OPEN
template<> ::Entry::C2E_LoginRequest* Arena::CreateMaybeMessage<::Entry::C2E_LoginRequest>(Arena*);
template<> ::Entry::E2C_LoginResponse* Arena::CreateMaybeMessage<::Entry::E2C_LoginResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Entry {

enum ENTRY_RECV_MESSAGETYPE : int {
  C2E_LOGIN_MESSAGE = 0,
  ENTRY_RECV_MESSAGETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENTRY_RECV_MESSAGETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENTRY_RECV_MESSAGETYPE_IsValid(int value);
constexpr ENTRY_RECV_MESSAGETYPE ENTRY_RECV_MESSAGETYPE_MIN = C2E_LOGIN_MESSAGE;
constexpr ENTRY_RECV_MESSAGETYPE ENTRY_RECV_MESSAGETYPE_MAX = C2E_LOGIN_MESSAGE;
constexpr int ENTRY_RECV_MESSAGETYPE_ARRAYSIZE = ENTRY_RECV_MESSAGETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENTRY_RECV_MESSAGETYPE_descriptor();
template<typename T>
inline const std::string& ENTRY_RECV_MESSAGETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENTRY_RECV_MESSAGETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENTRY_RECV_MESSAGETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENTRY_RECV_MESSAGETYPE_descriptor(), enum_t_value);
}
inline bool ENTRY_RECV_MESSAGETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENTRY_RECV_MESSAGETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENTRY_RECV_MESSAGETYPE>(
    ENTRY_RECV_MESSAGETYPE_descriptor(), name, value);
}
enum ENTRY_SEND_MESSAGETYPE : int {
  E2C_LOGIN_R_MESSAGE = 0,
  ENTRY_SEND_MESSAGETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENTRY_SEND_MESSAGETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENTRY_SEND_MESSAGETYPE_IsValid(int value);
constexpr ENTRY_SEND_MESSAGETYPE ENTRY_SEND_MESSAGETYPE_MIN = E2C_LOGIN_R_MESSAGE;
constexpr ENTRY_SEND_MESSAGETYPE ENTRY_SEND_MESSAGETYPE_MAX = E2C_LOGIN_R_MESSAGE;
constexpr int ENTRY_SEND_MESSAGETYPE_ARRAYSIZE = ENTRY_SEND_MESSAGETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENTRY_SEND_MESSAGETYPE_descriptor();
template<typename T>
inline const std::string& ENTRY_SEND_MESSAGETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENTRY_SEND_MESSAGETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENTRY_SEND_MESSAGETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENTRY_SEND_MESSAGETYPE_descriptor(), enum_t_value);
}
inline bool ENTRY_SEND_MESSAGETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENTRY_SEND_MESSAGETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENTRY_SEND_MESSAGETYPE>(
    ENTRY_SEND_MESSAGETYPE_descriptor(), name, value);
}
enum ENTRY_MESSAGE_RESPONSE : int {
  OK = 0,
  PASSWD_AUTH_FAILED = 1,
  NO_ACCOUNT_RECORD = 2,
  ENTRY_MESSAGE_RESPONSE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENTRY_MESSAGE_RESPONSE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENTRY_MESSAGE_RESPONSE_IsValid(int value);
constexpr ENTRY_MESSAGE_RESPONSE ENTRY_MESSAGE_RESPONSE_MIN = OK;
constexpr ENTRY_MESSAGE_RESPONSE ENTRY_MESSAGE_RESPONSE_MAX = NO_ACCOUNT_RECORD;
constexpr int ENTRY_MESSAGE_RESPONSE_ARRAYSIZE = ENTRY_MESSAGE_RESPONSE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENTRY_MESSAGE_RESPONSE_descriptor();
template<typename T>
inline const std::string& ENTRY_MESSAGE_RESPONSE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENTRY_MESSAGE_RESPONSE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENTRY_MESSAGE_RESPONSE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENTRY_MESSAGE_RESPONSE_descriptor(), enum_t_value);
}
inline bool ENTRY_MESSAGE_RESPONSE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENTRY_MESSAGE_RESPONSE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENTRY_MESSAGE_RESPONSE>(
    ENTRY_MESSAGE_RESPONSE_descriptor(), name, value);
}
// ===================================================================

class C2E_LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Entry.C2E_LoginRequest) */ {
 public:
  inline C2E_LoginRequest() : C2E_LoginRequest(nullptr) {}
  ~C2E_LoginRequest() override;
  explicit constexpr C2E_LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2E_LoginRequest(const C2E_LoginRequest& from);
  C2E_LoginRequest(C2E_LoginRequest&& from) noexcept
    : C2E_LoginRequest() {
    *this = ::std::move(from);
  }

  inline C2E_LoginRequest& operator=(const C2E_LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2E_LoginRequest& operator=(C2E_LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2E_LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2E_LoginRequest* internal_default_instance() {
    return reinterpret_cast<const C2E_LoginRequest*>(
               &_C2E_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2E_LoginRequest& a, C2E_LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2E_LoginRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2E_LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2E_LoginRequest* New() const final {
    return new C2E_LoginRequest();
  }

  C2E_LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2E_LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2E_LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2E_LoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2E_LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entry.C2E_LoginRequest";
  }
  protected:
  explicit C2E_LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_MUST_USE_RESULT std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:Entry.C2E_LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2fproto_2fentry_2eproto;
};
// -------------------------------------------------------------------

class E2C_LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Entry.E2C_LoginResponse) */ {
 public:
  inline E2C_LoginResponse() : E2C_LoginResponse(nullptr) {}
  ~E2C_LoginResponse() override;
  explicit constexpr E2C_LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  E2C_LoginResponse(const E2C_LoginResponse& from);
  E2C_LoginResponse(E2C_LoginResponse&& from) noexcept
    : E2C_LoginResponse() {
    *this = ::std::move(from);
  }

  inline E2C_LoginResponse& operator=(const E2C_LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2C_LoginResponse& operator=(E2C_LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const E2C_LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const E2C_LoginResponse* internal_default_instance() {
    return reinterpret_cast<const E2C_LoginResponse*>(
               &_E2C_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(E2C_LoginResponse& a, E2C_LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(E2C_LoginResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(E2C_LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline E2C_LoginResponse* New() const final {
    return new E2C_LoginResponse();
  }

  E2C_LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<E2C_LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const E2C_LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const E2C_LoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2C_LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entry.E2C_LoginResponse";
  }
  protected:
  explicit E2C_LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseTypeFieldNumber = 1,
  };
  // .Entry.ENTRY_MESSAGE_RESPONSE responseType = 1;
  void clear_responsetype();
  ::Entry::ENTRY_MESSAGE_RESPONSE responsetype() const;
  void set_responsetype(::Entry::ENTRY_MESSAGE_RESPONSE value);
  private:
  ::Entry::ENTRY_MESSAGE_RESPONSE _internal_responsetype() const;
  void _internal_set_responsetype(::Entry::ENTRY_MESSAGE_RESPONSE value);
  public:

  // @@protoc_insertion_point(class_scope:Entry.E2C_LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int responsetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2fproto_2fentry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2E_LoginRequest

// string account = 1;
inline void C2E_LoginRequest::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& C2E_LoginRequest::account() const {
  // @@protoc_insertion_point(field_get:Entry.C2E_LoginRequest.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2E_LoginRequest::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Entry.C2E_LoginRequest.account)
}
inline std::string* C2E_LoginRequest::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:Entry.C2E_LoginRequest.account)
  return _s;
}
inline const std::string& C2E_LoginRequest::_internal_account() const {
  return account_.Get();
}
inline void C2E_LoginRequest::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2E_LoginRequest::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2E_LoginRequest::release_account() {
  // @@protoc_insertion_point(field_release:Entry.C2E_LoginRequest.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2E_LoginRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Entry.C2E_LoginRequest.account)
}

// string passwd = 2;
inline void C2E_LoginRequest::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& C2E_LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:Entry.C2E_LoginRequest.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2E_LoginRequest::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Entry.C2E_LoginRequest.passwd)
}
inline std::string* C2E_LoginRequest::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:Entry.C2E_LoginRequest.passwd)
  return _s;
}
inline const std::string& C2E_LoginRequest::_internal_passwd() const {
  return passwd_.Get();
}
inline void C2E_LoginRequest::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2E_LoginRequest::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2E_LoginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:Entry.C2E_LoginRequest.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2E_LoginRequest::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Entry.C2E_LoginRequest.passwd)
}

// -------------------------------------------------------------------

// E2C_LoginResponse

// .Entry.ENTRY_MESSAGE_RESPONSE responseType = 1;
inline void E2C_LoginResponse::clear_responsetype() {
  responsetype_ = 0;
}
inline ::Entry::ENTRY_MESSAGE_RESPONSE E2C_LoginResponse::_internal_responsetype() const {
  return static_cast< ::Entry::ENTRY_MESSAGE_RESPONSE >(responsetype_);
}
inline ::Entry::ENTRY_MESSAGE_RESPONSE E2C_LoginResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:Entry.E2C_LoginResponse.responseType)
  return _internal_responsetype();
}
inline void E2C_LoginResponse::_internal_set_responsetype(::Entry::ENTRY_MESSAGE_RESPONSE value) {
  
  responsetype_ = value;
}
inline void E2C_LoginResponse::set_responsetype(::Entry::ENTRY_MESSAGE_RESPONSE value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:Entry.E2C_LoginResponse.responseType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Entry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Entry::ENTRY_RECV_MESSAGETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Entry::ENTRY_RECV_MESSAGETYPE>() {
  return ::Entry::ENTRY_RECV_MESSAGETYPE_descriptor();
}
template <> struct is_proto_enum< ::Entry::ENTRY_SEND_MESSAGETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Entry::ENTRY_SEND_MESSAGETYPE>() {
  return ::Entry::ENTRY_SEND_MESSAGETYPE_descriptor();
}
template <> struct is_proto_enum< ::Entry::ENTRY_MESSAGE_RESPONSE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Entry::ENTRY_MESSAGE_RESPONSE>() {
  return ::Entry::ENTRY_MESSAGE_RESPONSE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2fproto_2fentry_2eproto
