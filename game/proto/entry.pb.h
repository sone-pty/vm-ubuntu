// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game/proto/entry.proto

#ifndef PROTOBUF_INCLUDED_game_2fproto_2fentry_2eproto
#define PROTOBUF_INCLUDED_game_2fproto_2fentry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_game_2fproto_2fentry_2eproto 

namespace protobuf_game_2fproto_2fentry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_game_2fproto_2fentry_2eproto
namespace Entry {
class C2E_LoginRequest;
class C2E_LoginRequestDefaultTypeInternal;
extern C2E_LoginRequestDefaultTypeInternal _C2E_LoginRequest_default_instance_;
class E2C_LoginResponse;
class E2C_LoginResponseDefaultTypeInternal;
extern E2C_LoginResponseDefaultTypeInternal _E2C_LoginResponse_default_instance_;
}  // namespace Entry
namespace google {
namespace protobuf {
template<> ::Entry::C2E_LoginRequest* Arena::CreateMaybeMessage<::Entry::C2E_LoginRequest>(Arena*);
template<> ::Entry::E2C_LoginResponse* Arena::CreateMaybeMessage<::Entry::E2C_LoginResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Entry {

enum ENTRY_RECV_MESSAGETYPE {
  C2E_LOGIN_MESSAGE = 0,
  ENTRY_RECV_MESSAGETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENTRY_RECV_MESSAGETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENTRY_RECV_MESSAGETYPE_IsValid(int value);
const ENTRY_RECV_MESSAGETYPE ENTRY_RECV_MESSAGETYPE_MIN = C2E_LOGIN_MESSAGE;
const ENTRY_RECV_MESSAGETYPE ENTRY_RECV_MESSAGETYPE_MAX = C2E_LOGIN_MESSAGE;
const int ENTRY_RECV_MESSAGETYPE_ARRAYSIZE = ENTRY_RECV_MESSAGETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENTRY_RECV_MESSAGETYPE_descriptor();
inline const ::std::string& ENTRY_RECV_MESSAGETYPE_Name(ENTRY_RECV_MESSAGETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENTRY_RECV_MESSAGETYPE_descriptor(), value);
}
inline bool ENTRY_RECV_MESSAGETYPE_Parse(
    const ::std::string& name, ENTRY_RECV_MESSAGETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENTRY_RECV_MESSAGETYPE>(
    ENTRY_RECV_MESSAGETYPE_descriptor(), name, value);
}
enum ENTRY_SEND_MESSAGETYPE {
  E2C_LOGIN_R_MESSAGE = 0,
  ENTRY_SEND_MESSAGETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENTRY_SEND_MESSAGETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENTRY_SEND_MESSAGETYPE_IsValid(int value);
const ENTRY_SEND_MESSAGETYPE ENTRY_SEND_MESSAGETYPE_MIN = E2C_LOGIN_R_MESSAGE;
const ENTRY_SEND_MESSAGETYPE ENTRY_SEND_MESSAGETYPE_MAX = E2C_LOGIN_R_MESSAGE;
const int ENTRY_SEND_MESSAGETYPE_ARRAYSIZE = ENTRY_SEND_MESSAGETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENTRY_SEND_MESSAGETYPE_descriptor();
inline const ::std::string& ENTRY_SEND_MESSAGETYPE_Name(ENTRY_SEND_MESSAGETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENTRY_SEND_MESSAGETYPE_descriptor(), value);
}
inline bool ENTRY_SEND_MESSAGETYPE_Parse(
    const ::std::string& name, ENTRY_SEND_MESSAGETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENTRY_SEND_MESSAGETYPE>(
    ENTRY_SEND_MESSAGETYPE_descriptor(), name, value);
}
enum ENTRY_MESSAGE_RESPONSE {
  OK = 0,
  PASSWD_AUTH_FAILED = 1,
  NO_ACCOUNT_RECORD = 2,
  ENTRY_MESSAGE_RESPONSE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENTRY_MESSAGE_RESPONSE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENTRY_MESSAGE_RESPONSE_IsValid(int value);
const ENTRY_MESSAGE_RESPONSE ENTRY_MESSAGE_RESPONSE_MIN = OK;
const ENTRY_MESSAGE_RESPONSE ENTRY_MESSAGE_RESPONSE_MAX = NO_ACCOUNT_RECORD;
const int ENTRY_MESSAGE_RESPONSE_ARRAYSIZE = ENTRY_MESSAGE_RESPONSE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENTRY_MESSAGE_RESPONSE_descriptor();
inline const ::std::string& ENTRY_MESSAGE_RESPONSE_Name(ENTRY_MESSAGE_RESPONSE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENTRY_MESSAGE_RESPONSE_descriptor(), value);
}
inline bool ENTRY_MESSAGE_RESPONSE_Parse(
    const ::std::string& name, ENTRY_MESSAGE_RESPONSE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENTRY_MESSAGE_RESPONSE>(
    ENTRY_MESSAGE_RESPONSE_descriptor(), name, value);
}
// ===================================================================

class C2E_LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Entry.C2E_LoginRequest) */ {
 public:
  C2E_LoginRequest();
  virtual ~C2E_LoginRequest();

  C2E_LoginRequest(const C2E_LoginRequest& from);

  inline C2E_LoginRequest& operator=(const C2E_LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2E_LoginRequest(C2E_LoginRequest&& from) noexcept
    : C2E_LoginRequest() {
    *this = ::std::move(from);
  }

  inline C2E_LoginRequest& operator=(C2E_LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const C2E_LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2E_LoginRequest* internal_default_instance() {
    return reinterpret_cast<const C2E_LoginRequest*>(
               &_C2E_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(C2E_LoginRequest* other);
  friend void swap(C2E_LoginRequest& a, C2E_LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2E_LoginRequest* New() const final {
    return CreateMaybeMessage<C2E_LoginRequest>(NULL);
  }

  C2E_LoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<C2E_LoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const C2E_LoginRequest& from);
  void MergeFrom(const C2E_LoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2E_LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:Entry.C2E_LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_2fproto_2fentry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class E2C_LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Entry.E2C_LoginResponse) */ {
 public:
  E2C_LoginResponse();
  virtual ~E2C_LoginResponse();

  E2C_LoginResponse(const E2C_LoginResponse& from);

  inline E2C_LoginResponse& operator=(const E2C_LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  E2C_LoginResponse(E2C_LoginResponse&& from) noexcept
    : E2C_LoginResponse() {
    *this = ::std::move(from);
  }

  inline E2C_LoginResponse& operator=(E2C_LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const E2C_LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const E2C_LoginResponse* internal_default_instance() {
    return reinterpret_cast<const E2C_LoginResponse*>(
               &_E2C_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(E2C_LoginResponse* other);
  friend void swap(E2C_LoginResponse& a, E2C_LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline E2C_LoginResponse* New() const final {
    return CreateMaybeMessage<E2C_LoginResponse>(NULL);
  }

  E2C_LoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<E2C_LoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const E2C_LoginResponse& from);
  void MergeFrom(const E2C_LoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2C_LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Entry.ENTRY_MESSAGE_RESPONSE responseType = 1;
  void clear_responsetype();
  static const int kResponseTypeFieldNumber = 1;
  ::Entry::ENTRY_MESSAGE_RESPONSE responsetype() const;
  void set_responsetype(::Entry::ENTRY_MESSAGE_RESPONSE value);

  // @@protoc_insertion_point(class_scope:Entry.E2C_LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int responsetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_2fproto_2fentry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2E_LoginRequest

// string account = 1;
inline void C2E_LoginRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2E_LoginRequest::account() const {
  // @@protoc_insertion_point(field_get:Entry.C2E_LoginRequest.account)
  return account_.GetNoArena();
}
inline void C2E_LoginRequest::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Entry.C2E_LoginRequest.account)
}
#if LANG_CXX11
inline void C2E_LoginRequest::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Entry.C2E_LoginRequest.account)
}
#endif
inline void C2E_LoginRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Entry.C2E_LoginRequest.account)
}
inline void C2E_LoginRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Entry.C2E_LoginRequest.account)
}
inline ::std::string* C2E_LoginRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Entry.C2E_LoginRequest.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2E_LoginRequest::release_account() {
  // @@protoc_insertion_point(field_release:Entry.C2E_LoginRequest.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2E_LoginRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Entry.C2E_LoginRequest.account)
}

// string passwd = 2;
inline void C2E_LoginRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2E_LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:Entry.C2E_LoginRequest.passwd)
  return passwd_.GetNoArena();
}
inline void C2E_LoginRequest::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Entry.C2E_LoginRequest.passwd)
}
#if LANG_CXX11
inline void C2E_LoginRequest::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Entry.C2E_LoginRequest.passwd)
}
#endif
inline void C2E_LoginRequest::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Entry.C2E_LoginRequest.passwd)
}
inline void C2E_LoginRequest::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Entry.C2E_LoginRequest.passwd)
}
inline ::std::string* C2E_LoginRequest::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:Entry.C2E_LoginRequest.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2E_LoginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:Entry.C2E_LoginRequest.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2E_LoginRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:Entry.C2E_LoginRequest.passwd)
}

// -------------------------------------------------------------------

// E2C_LoginResponse

// .Entry.ENTRY_MESSAGE_RESPONSE responseType = 1;
inline void E2C_LoginResponse::clear_responsetype() {
  responsetype_ = 0;
}
inline ::Entry::ENTRY_MESSAGE_RESPONSE E2C_LoginResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:Entry.E2C_LoginResponse.responseType)
  return static_cast< ::Entry::ENTRY_MESSAGE_RESPONSE >(responsetype_);
}
inline void E2C_LoginResponse::set_responsetype(::Entry::ENTRY_MESSAGE_RESPONSE value) {
  
  responsetype_ = value;
  // @@protoc_insertion_point(field_set:Entry.E2C_LoginResponse.responseType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Entry

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Entry::ENTRY_RECV_MESSAGETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Entry::ENTRY_RECV_MESSAGETYPE>() {
  return ::Entry::ENTRY_RECV_MESSAGETYPE_descriptor();
}
template <> struct is_proto_enum< ::Entry::ENTRY_SEND_MESSAGETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Entry::ENTRY_SEND_MESSAGETYPE>() {
  return ::Entry::ENTRY_SEND_MESSAGETYPE_descriptor();
}
template <> struct is_proto_enum< ::Entry::ENTRY_MESSAGE_RESPONSE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Entry::ENTRY_MESSAGE_RESPONSE>() {
  return ::Entry::ENTRY_MESSAGE_RESPONSE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_game_2fproto_2fentry_2eproto
