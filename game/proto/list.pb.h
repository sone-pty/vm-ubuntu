// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game/proto/list.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2fproto_2flist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2fproto_2flist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2fproto_2flist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2fproto_2flist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2fproto_2flist_2eproto;
namespace List {
class E2L_UploadLoading;
class E2L_UploadLoadingDefaultTypeInternal;
extern E2L_UploadLoadingDefaultTypeInternal _E2L_UploadLoading_default_instance_;
}  // namespace List
PROTOBUF_NAMESPACE_OPEN
template<> ::List::E2L_UploadLoading* Arena::CreateMaybeMessage<::List::E2L_UploadLoading>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace List {

enum LIST_RECV_MESSAGETYPE : int {
  E2L_UPLOAD_LOADING_MESSAGE = 0,
  LIST_RECV_MESSAGETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LIST_RECV_MESSAGETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LIST_RECV_MESSAGETYPE_IsValid(int value);
constexpr LIST_RECV_MESSAGETYPE LIST_RECV_MESSAGETYPE_MIN = E2L_UPLOAD_LOADING_MESSAGE;
constexpr LIST_RECV_MESSAGETYPE LIST_RECV_MESSAGETYPE_MAX = E2L_UPLOAD_LOADING_MESSAGE;
constexpr int LIST_RECV_MESSAGETYPE_ARRAYSIZE = LIST_RECV_MESSAGETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LIST_RECV_MESSAGETYPE_descriptor();
template<typename T>
inline const std::string& LIST_RECV_MESSAGETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LIST_RECV_MESSAGETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LIST_RECV_MESSAGETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LIST_RECV_MESSAGETYPE_descriptor(), enum_t_value);
}
inline bool LIST_RECV_MESSAGETYPE_Parse(
    const std::string& name, LIST_RECV_MESSAGETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LIST_RECV_MESSAGETYPE>(
    LIST_RECV_MESSAGETYPE_descriptor(), name, value);
}
enum LIST_SEND_MESSAGETYPE : int {
  L2C_ENTRY_CHOICE_MESSAGE = 0,
  LIST_SEND_MESSAGETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LIST_SEND_MESSAGETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LIST_SEND_MESSAGETYPE_IsValid(int value);
constexpr LIST_SEND_MESSAGETYPE LIST_SEND_MESSAGETYPE_MIN = L2C_ENTRY_CHOICE_MESSAGE;
constexpr LIST_SEND_MESSAGETYPE LIST_SEND_MESSAGETYPE_MAX = L2C_ENTRY_CHOICE_MESSAGE;
constexpr int LIST_SEND_MESSAGETYPE_ARRAYSIZE = LIST_SEND_MESSAGETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LIST_SEND_MESSAGETYPE_descriptor();
template<typename T>
inline const std::string& LIST_SEND_MESSAGETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LIST_SEND_MESSAGETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LIST_SEND_MESSAGETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LIST_SEND_MESSAGETYPE_descriptor(), enum_t_value);
}
inline bool LIST_SEND_MESSAGETYPE_Parse(
    const std::string& name, LIST_SEND_MESSAGETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LIST_SEND_MESSAGETYPE>(
    LIST_SEND_MESSAGETYPE_descriptor(), name, value);
}
// ===================================================================

class E2L_UploadLoading PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:List.E2L_UploadLoading) */ {
 public:
  inline E2L_UploadLoading() : E2L_UploadLoading(nullptr) {};
  virtual ~E2L_UploadLoading();

  E2L_UploadLoading(const E2L_UploadLoading& from);
  E2L_UploadLoading(E2L_UploadLoading&& from) noexcept
    : E2L_UploadLoading() {
    *this = ::std::move(from);
  }

  inline E2L_UploadLoading& operator=(const E2L_UploadLoading& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2L_UploadLoading& operator=(E2L_UploadLoading&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const E2L_UploadLoading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const E2L_UploadLoading* internal_default_instance() {
    return reinterpret_cast<const E2L_UploadLoading*>(
               &_E2L_UploadLoading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(E2L_UploadLoading& a, E2L_UploadLoading& b) {
    a.Swap(&b);
  }
  inline void Swap(E2L_UploadLoading* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(E2L_UploadLoading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline E2L_UploadLoading* New() const final {
    return CreateMaybeMessage<E2L_UploadLoading>(nullptr);
  }

  E2L_UploadLoading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<E2L_UploadLoading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const E2L_UploadLoading& from);
  void MergeFrom(const E2L_UploadLoading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2L_UploadLoading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "List.E2L_UploadLoading";
  }
  protected:
  explicit E2L_UploadLoading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_2fproto_2flist_2eproto);
    return ::descriptor_table_game_2fproto_2flist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpInfoFieldNumber = 1,
    kUpdateTimeFieldNumber = 3,
    kLoadingWeightFieldNumber = 2,
  };
  // string ipInfo = 1;
  void clear_ipinfo();
  const std::string& ipinfo() const;
  void set_ipinfo(const std::string& value);
  void set_ipinfo(std::string&& value);
  void set_ipinfo(const char* value);
  void set_ipinfo(const char* value, size_t size);
  std::string* mutable_ipinfo();
  std::string* release_ipinfo();
  void set_allocated_ipinfo(std::string* ipinfo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipinfo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipinfo(
      std::string* ipinfo);
  private:
  const std::string& _internal_ipinfo() const;
  void _internal_set_ipinfo(const std::string& value);
  std::string* _internal_mutable_ipinfo();
  public:

  // int64 updateTime = 3;
  void clear_updatetime();
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime() const;
  void set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatetime() const;
  void _internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 loadingWeight = 2;
  void clear_loadingweight();
  ::PROTOBUF_NAMESPACE_ID::int32 loadingweight() const;
  void set_loadingweight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_loadingweight() const;
  void _internal_set_loadingweight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:List.E2L_UploadLoading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 loadingweight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2fproto_2flist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// E2L_UploadLoading

// string ipInfo = 1;
inline void E2L_UploadLoading::clear_ipinfo() {
  ipinfo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& E2L_UploadLoading::ipinfo() const {
  // @@protoc_insertion_point(field_get:List.E2L_UploadLoading.ipInfo)
  return _internal_ipinfo();
}
inline void E2L_UploadLoading::set_ipinfo(const std::string& value) {
  _internal_set_ipinfo(value);
  // @@protoc_insertion_point(field_set:List.E2L_UploadLoading.ipInfo)
}
inline std::string* E2L_UploadLoading::mutable_ipinfo() {
  // @@protoc_insertion_point(field_mutable:List.E2L_UploadLoading.ipInfo)
  return _internal_mutable_ipinfo();
}
inline const std::string& E2L_UploadLoading::_internal_ipinfo() const {
  return ipinfo_.Get();
}
inline void E2L_UploadLoading::_internal_set_ipinfo(const std::string& value) {
  
  ipinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void E2L_UploadLoading::set_ipinfo(std::string&& value) {
  
  ipinfo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:List.E2L_UploadLoading.ipInfo)
}
inline void E2L_UploadLoading::set_ipinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:List.E2L_UploadLoading.ipInfo)
}
inline void E2L_UploadLoading::set_ipinfo(const char* value,
    size_t size) {
  
  ipinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:List.E2L_UploadLoading.ipInfo)
}
inline std::string* E2L_UploadLoading::_internal_mutable_ipinfo() {
  
  return ipinfo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* E2L_UploadLoading::release_ipinfo() {
  // @@protoc_insertion_point(field_release:List.E2L_UploadLoading.ipInfo)
  return ipinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void E2L_UploadLoading::set_allocated_ipinfo(std::string* ipinfo) {
  if (ipinfo != nullptr) {
    
  } else {
    
  }
  ipinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipinfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:List.E2L_UploadLoading.ipInfo)
}
inline std::string* E2L_UploadLoading::unsafe_arena_release_ipinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:List.E2L_UploadLoading.ipInfo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ipinfo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void E2L_UploadLoading::unsafe_arena_set_allocated_ipinfo(
    std::string* ipinfo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipinfo != nullptr) {
    
  } else {
    
  }
  ipinfo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipinfo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:List.E2L_UploadLoading.ipInfo)
}

// int32 loadingWeight = 2;
inline void E2L_UploadLoading::clear_loadingweight() {
  loadingweight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 E2L_UploadLoading::_internal_loadingweight() const {
  return loadingweight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 E2L_UploadLoading::loadingweight() const {
  // @@protoc_insertion_point(field_get:List.E2L_UploadLoading.loadingWeight)
  return _internal_loadingweight();
}
inline void E2L_UploadLoading::_internal_set_loadingweight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loadingweight_ = value;
}
inline void E2L_UploadLoading::set_loadingweight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_loadingweight(value);
  // @@protoc_insertion_point(field_set:List.E2L_UploadLoading.loadingWeight)
}

// int64 updateTime = 3;
inline void E2L_UploadLoading::clear_updatetime() {
  updatetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 E2L_UploadLoading::_internal_updatetime() const {
  return updatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 E2L_UploadLoading::updatetime() const {
  // @@protoc_insertion_point(field_get:List.E2L_UploadLoading.updateTime)
  return _internal_updatetime();
}
inline void E2L_UploadLoading::_internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatetime_ = value;
}
inline void E2L_UploadLoading::set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:List.E2L_UploadLoading.updateTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace List

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::List::LIST_RECV_MESSAGETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::List::LIST_RECV_MESSAGETYPE>() {
  return ::List::LIST_RECV_MESSAGETYPE_descriptor();
}
template <> struct is_proto_enum< ::List::LIST_SEND_MESSAGETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::List::LIST_SEND_MESSAGETYPE>() {
  return ::List::LIST_SEND_MESSAGETYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2fproto_2flist_2eproto
