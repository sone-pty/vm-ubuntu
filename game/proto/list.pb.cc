// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game/proto/list.proto

#include "game/proto/list.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace List {
class E2L_UploadLoadingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<E2L_UploadLoading>
      _instance;
} _E2L_UploadLoading_default_instance_;
}  // namespace List
namespace protobuf_game_2fproto_2flist_2eproto {
static void InitDefaultsE2L_UploadLoading() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::List::_E2L_UploadLoading_default_instance_;
    new (ptr) ::List::E2L_UploadLoading();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::List::E2L_UploadLoading::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_E2L_UploadLoading =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsE2L_UploadLoading}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_E2L_UploadLoading.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::List::E2L_UploadLoading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::List::E2L_UploadLoading, ipinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::List::E2L_UploadLoading, loadingweight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::List::E2L_UploadLoading, updatetime_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::List::E2L_UploadLoading)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::List::_E2L_UploadLoading_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "game/proto/list.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025game/proto/list.proto\022\004List\"N\n\021E2L_Upl"
      "oadLoading\022\016\n\006ipInfo\030\001 \001(\t\022\025\n\rloadingWei"
      "ght\030\002 \001(\005\022\022\n\nupdateTime\030\003 \001(\003*7\n\025LIST_RE"
      "CV_MESSAGETYPE\022\036\n\032E2L_UPLOAD_LOADING_MES"
      "SAGE\020\000*5\n\025LIST_SEND_MESSAGETYPE\022\034\n\030L2C_E"
      "NTRY_CHOICE_MESSAGE\020\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game/proto/list.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_game_2fproto_2flist_2eproto
namespace List {
const ::google::protobuf::EnumDescriptor* LIST_RECV_MESSAGETYPE_descriptor() {
  protobuf_game_2fproto_2flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2fproto_2flist_2eproto::file_level_enum_descriptors[0];
}
bool LIST_RECV_MESSAGETYPE_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LIST_SEND_MESSAGETYPE_descriptor() {
  protobuf_game_2fproto_2flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2fproto_2flist_2eproto::file_level_enum_descriptors[1];
}
bool LIST_SEND_MESSAGETYPE_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void E2L_UploadLoading::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int E2L_UploadLoading::kIpInfoFieldNumber;
const int E2L_UploadLoading::kLoadingWeightFieldNumber;
const int E2L_UploadLoading::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

E2L_UploadLoading::E2L_UploadLoading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_game_2fproto_2flist_2eproto::scc_info_E2L_UploadLoading.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:List.E2L_UploadLoading)
}
E2L_UploadLoading::E2L_UploadLoading(const E2L_UploadLoading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipinfo().size() > 0) {
    ipinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipinfo_);
  }
  ::memcpy(&updatetime_, &from.updatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&loadingweight_) -
    reinterpret_cast<char*>(&updatetime_)) + sizeof(loadingweight_));
  // @@protoc_insertion_point(copy_constructor:List.E2L_UploadLoading)
}

void E2L_UploadLoading::SharedCtor() {
  ipinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&updatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loadingweight_) -
      reinterpret_cast<char*>(&updatetime_)) + sizeof(loadingweight_));
}

E2L_UploadLoading::~E2L_UploadLoading() {
  // @@protoc_insertion_point(destructor:List.E2L_UploadLoading)
  SharedDtor();
}

void E2L_UploadLoading::SharedDtor() {
  ipinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void E2L_UploadLoading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* E2L_UploadLoading::descriptor() {
  ::protobuf_game_2fproto_2flist_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2fproto_2flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const E2L_UploadLoading& E2L_UploadLoading::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_game_2fproto_2flist_2eproto::scc_info_E2L_UploadLoading.base);
  return *internal_default_instance();
}


void E2L_UploadLoading::Clear() {
// @@protoc_insertion_point(message_clear_start:List.E2L_UploadLoading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&updatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loadingweight_) -
      reinterpret_cast<char*>(&updatetime_)) + sizeof(loadingweight_));
  _internal_metadata_.Clear();
}

bool E2L_UploadLoading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:List.E2L_UploadLoading)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ipInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipinfo().data(), static_cast<int>(this->ipinfo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "List.E2L_UploadLoading.ipInfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 loadingWeight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loadingweight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 updateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:List.E2L_UploadLoading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:List.E2L_UploadLoading)
  return false;
#undef DO_
}

void E2L_UploadLoading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:List.E2L_UploadLoading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipInfo = 1;
  if (this->ipinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipinfo().data(), static_cast<int>(this->ipinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "List.E2L_UploadLoading.ipInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipinfo(), output);
  }

  // int32 loadingWeight = 2;
  if (this->loadingweight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->loadingweight(), output);
  }

  // int64 updateTime = 3;
  if (this->updatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->updatetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:List.E2L_UploadLoading)
}

::google::protobuf::uint8* E2L_UploadLoading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:List.E2L_UploadLoading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipInfo = 1;
  if (this->ipinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipinfo().data(), static_cast<int>(this->ipinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "List.E2L_UploadLoading.ipInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipinfo(), target);
  }

  // int32 loadingWeight = 2;
  if (this->loadingweight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->loadingweight(), target);
  }

  // int64 updateTime = 3;
  if (this->updatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->updatetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:List.E2L_UploadLoading)
  return target;
}

size_t E2L_UploadLoading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:List.E2L_UploadLoading)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ipInfo = 1;
  if (this->ipinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipinfo());
  }

  // int64 updateTime = 3;
  if (this->updatetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updatetime());
  }

  // int32 loadingWeight = 2;
  if (this->loadingweight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->loadingweight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void E2L_UploadLoading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:List.E2L_UploadLoading)
  GOOGLE_DCHECK_NE(&from, this);
  const E2L_UploadLoading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const E2L_UploadLoading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:List.E2L_UploadLoading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:List.E2L_UploadLoading)
    MergeFrom(*source);
  }
}

void E2L_UploadLoading::MergeFrom(const E2L_UploadLoading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:List.E2L_UploadLoading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipinfo().size() > 0) {

    ipinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipinfo_);
  }
  if (from.updatetime() != 0) {
    set_updatetime(from.updatetime());
  }
  if (from.loadingweight() != 0) {
    set_loadingweight(from.loadingweight());
  }
}

void E2L_UploadLoading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:List.E2L_UploadLoading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E2L_UploadLoading::CopyFrom(const E2L_UploadLoading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:List.E2L_UploadLoading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2L_UploadLoading::IsInitialized() const {
  return true;
}

void E2L_UploadLoading::Swap(E2L_UploadLoading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void E2L_UploadLoading::InternalSwap(E2L_UploadLoading* other) {
  using std::swap;
  ipinfo_.Swap(&other->ipinfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(updatetime_, other->updatetime_);
  swap(loadingweight_, other->loadingweight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata E2L_UploadLoading::GetMetadata() const {
  protobuf_game_2fproto_2flist_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2fproto_2flist_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace List
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::List::E2L_UploadLoading* Arena::CreateMaybeMessage< ::List::E2L_UploadLoading >(Arena* arena) {
  return Arena::CreateInternal< ::List::E2L_UploadLoading >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
