// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogMessage.proto

#ifndef PROTOBUF_INCLUDED_LogMessage_2eproto
#define PROTOBUF_INCLUDED_LogMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_LogMessage_2eproto 

namespace protobuf_LogMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_LogMessage_2eproto
namespace LogMessage {
class LogRequest;
class LogRequestDefaultTypeInternal;
extern LogRequestDefaultTypeInternal _LogRequest_default_instance_;
class LogResponse;
class LogResponseDefaultTypeInternal;
extern LogResponseDefaultTypeInternal _LogResponse_default_instance_;
}  // namespace LogMessage
namespace google {
namespace protobuf {
template<> ::LogMessage::LogRequest* Arena::CreateMaybeMessage<::LogMessage::LogRequest>(Arena*);
template<> ::LogMessage::LogResponse* Arena::CreateMaybeMessage<::LogMessage::LogResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LogMessage {

enum LogRequest_LOG_LEVEL {
  LogRequest_LOG_LEVEL_TRACE = 0,
  LogRequest_LOG_LEVEL_DEBUG = 1,
  LogRequest_LOG_LEVEL_INFO = 2,
  LogRequest_LOG_LEVEL_WARN = 3,
  LogRequest_LOG_LEVEL_ERROR = 4,
  LogRequest_LOG_LEVEL_FATAL = 5,
  LogRequest_LOG_LEVEL_LogRequest_LOG_LEVEL_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogRequest_LOG_LEVEL_LogRequest_LOG_LEVEL_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LogRequest_LOG_LEVEL_IsValid(int value);
const LogRequest_LOG_LEVEL LogRequest_LOG_LEVEL_LOG_LEVEL_MIN = LogRequest_LOG_LEVEL_TRACE;
const LogRequest_LOG_LEVEL LogRequest_LOG_LEVEL_LOG_LEVEL_MAX = LogRequest_LOG_LEVEL_FATAL;
const int LogRequest_LOG_LEVEL_LOG_LEVEL_ARRAYSIZE = LogRequest_LOG_LEVEL_LOG_LEVEL_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogRequest_LOG_LEVEL_descriptor();
inline const ::std::string& LogRequest_LOG_LEVEL_Name(LogRequest_LOG_LEVEL value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogRequest_LOG_LEVEL_descriptor(), value);
}
inline bool LogRequest_LOG_LEVEL_Parse(
    const ::std::string& name, LogRequest_LOG_LEVEL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogRequest_LOG_LEVEL>(
    LogRequest_LOG_LEVEL_descriptor(), name, value);
}
enum LogResponse_RESP_STATUS {
  LogResponse_RESP_STATUS_OK = 0,
  LogResponse_RESP_STATUS_ERROR = 1,
  LogResponse_RESP_STATUS_LogResponse_RESP_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogResponse_RESP_STATUS_LogResponse_RESP_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LogResponse_RESP_STATUS_IsValid(int value);
const LogResponse_RESP_STATUS LogResponse_RESP_STATUS_RESP_STATUS_MIN = LogResponse_RESP_STATUS_OK;
const LogResponse_RESP_STATUS LogResponse_RESP_STATUS_RESP_STATUS_MAX = LogResponse_RESP_STATUS_ERROR;
const int LogResponse_RESP_STATUS_RESP_STATUS_ARRAYSIZE = LogResponse_RESP_STATUS_RESP_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogResponse_RESP_STATUS_descriptor();
inline const ::std::string& LogResponse_RESP_STATUS_Name(LogResponse_RESP_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogResponse_RESP_STATUS_descriptor(), value);
}
inline bool LogResponse_RESP_STATUS_Parse(
    const ::std::string& name, LogResponse_RESP_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogResponse_RESP_STATUS>(
    LogResponse_RESP_STATUS_descriptor(), name, value);
}
// ===================================================================

class LogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LogMessage.LogRequest) */ {
 public:
  LogRequest();
  virtual ~LogRequest();

  LogRequest(const LogRequest& from);

  inline LogRequest& operator=(const LogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogRequest(LogRequest&& from) noexcept
    : LogRequest() {
    *this = ::std::move(from);
  }

  inline LogRequest& operator=(LogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequest*>(
               &_LogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogRequest* other);
  friend void swap(LogRequest& a, LogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogRequest* New() const final {
    return CreateMaybeMessage<LogRequest>(NULL);
  }

  LogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogRequest& from);
  void MergeFrom(const LogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogRequest_LOG_LEVEL LOG_LEVEL;
  static const LOG_LEVEL TRACE =
    LogRequest_LOG_LEVEL_TRACE;
  static const LOG_LEVEL DEBUG =
    LogRequest_LOG_LEVEL_DEBUG;
  static const LOG_LEVEL INFO =
    LogRequest_LOG_LEVEL_INFO;
  static const LOG_LEVEL WARN =
    LogRequest_LOG_LEVEL_WARN;
  static const LOG_LEVEL ERROR =
    LogRequest_LOG_LEVEL_ERROR;
  static const LOG_LEVEL FATAL =
    LogRequest_LOG_LEVEL_FATAL;
  static inline bool LOG_LEVEL_IsValid(int value) {
    return LogRequest_LOG_LEVEL_IsValid(value);
  }
  static const LOG_LEVEL LOG_LEVEL_MIN =
    LogRequest_LOG_LEVEL_LOG_LEVEL_MIN;
  static const LOG_LEVEL LOG_LEVEL_MAX =
    LogRequest_LOG_LEVEL_LOG_LEVEL_MAX;
  static const int LOG_LEVEL_ARRAYSIZE =
    LogRequest_LOG_LEVEL_LOG_LEVEL_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LOG_LEVEL_descriptor() {
    return LogRequest_LOG_LEVEL_descriptor();
  }
  static inline const ::std::string& LOG_LEVEL_Name(LOG_LEVEL value) {
    return LogRequest_LOG_LEVEL_Name(value);
  }
  static inline bool LOG_LEVEL_Parse(const ::std::string& name,
      LOG_LEVEL* value) {
    return LogRequest_LOG_LEVEL_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .LogMessage.LogRequest.LOG_LEVEL level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::LogMessage::LogRequest_LOG_LEVEL level() const;
  void set_level(::LogMessage::LogRequest_LOG_LEVEL value);

  // @@protoc_insertion_point(class_scope:LogMessage.LogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LogMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LogMessage.LogResponse) */ {
 public:
  LogResponse();
  virtual ~LogResponse();

  LogResponse(const LogResponse& from);

  inline LogResponse& operator=(const LogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogResponse(LogResponse&& from) noexcept
    : LogResponse() {
    *this = ::std::move(from);
  }

  inline LogResponse& operator=(LogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogResponse* internal_default_instance() {
    return reinterpret_cast<const LogResponse*>(
               &_LogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LogResponse* other);
  friend void swap(LogResponse& a, LogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogResponse* New() const final {
    return CreateMaybeMessage<LogResponse>(NULL);
  }

  LogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogResponse& from);
  void MergeFrom(const LogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogResponse_RESP_STATUS RESP_STATUS;
  static const RESP_STATUS OK =
    LogResponse_RESP_STATUS_OK;
  static const RESP_STATUS ERROR =
    LogResponse_RESP_STATUS_ERROR;
  static inline bool RESP_STATUS_IsValid(int value) {
    return LogResponse_RESP_STATUS_IsValid(value);
  }
  static const RESP_STATUS RESP_STATUS_MIN =
    LogResponse_RESP_STATUS_RESP_STATUS_MIN;
  static const RESP_STATUS RESP_STATUS_MAX =
    LogResponse_RESP_STATUS_RESP_STATUS_MAX;
  static const int RESP_STATUS_ARRAYSIZE =
    LogResponse_RESP_STATUS_RESP_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESP_STATUS_descriptor() {
    return LogResponse_RESP_STATUS_descriptor();
  }
  static inline const ::std::string& RESP_STATUS_Name(RESP_STATUS value) {
    return LogResponse_RESP_STATUS_Name(value);
  }
  static inline bool RESP_STATUS_Parse(const ::std::string& name,
      RESP_STATUS* value) {
    return LogResponse_RESP_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .LogMessage.LogResponse.RESP_STATUS status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::LogMessage::LogResponse_RESP_STATUS status() const;
  void set_status(::LogMessage::LogResponse_RESP_STATUS value);

  // @@protoc_insertion_point(class_scope:LogMessage.LogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LogMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogRequest

// .LogMessage.LogRequest.LOG_LEVEL level = 1;
inline void LogRequest::clear_level() {
  level_ = 0;
}
inline ::LogMessage::LogRequest_LOG_LEVEL LogRequest::level() const {
  // @@protoc_insertion_point(field_get:LogMessage.LogRequest.level)
  return static_cast< ::LogMessage::LogRequest_LOG_LEVEL >(level_);
}
inline void LogRequest::set_level(::LogMessage::LogRequest_LOG_LEVEL value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:LogMessage.LogRequest.level)
}

// string content = 2;
inline void LogRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRequest::content() const {
  // @@protoc_insertion_point(field_get:LogMessage.LogRequest.content)
  return content_.GetNoArena();
}
inline void LogRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogMessage.LogRequest.content)
}
#if LANG_CXX11
inline void LogRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogMessage.LogRequest.content)
}
#endif
inline void LogRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogMessage.LogRequest.content)
}
inline void LogRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogMessage.LogRequest.content)
}
inline ::std::string* LogRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:LogMessage.LogRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRequest::release_content() {
  // @@protoc_insertion_point(field_release:LogMessage.LogRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:LogMessage.LogRequest.content)
}

// -------------------------------------------------------------------

// LogResponse

// .LogMessage.LogResponse.RESP_STATUS status = 1;
inline void LogResponse::clear_status() {
  status_ = 0;
}
inline ::LogMessage::LogResponse_RESP_STATUS LogResponse::status() const {
  // @@protoc_insertion_point(field_get:LogMessage.LogResponse.status)
  return static_cast< ::LogMessage::LogResponse_RESP_STATUS >(status_);
}
inline void LogResponse::set_status(::LogMessage::LogResponse_RESP_STATUS value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:LogMessage.LogResponse.status)
}

// string reason = 2;
inline void LogResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogResponse::reason() const {
  // @@protoc_insertion_point(field_get:LogMessage.LogResponse.reason)
  return reason_.GetNoArena();
}
inline void LogResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogMessage.LogResponse.reason)
}
#if LANG_CXX11
inline void LogResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogMessage.LogResponse.reason)
}
#endif
inline void LogResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogMessage.LogResponse.reason)
}
inline void LogResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogMessage.LogResponse.reason)
}
inline ::std::string* LogResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:LogMessage.LogResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogResponse::release_reason() {
  // @@protoc_insertion_point(field_release:LogMessage.LogResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:LogMessage.LogResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LogMessage

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LogMessage::LogRequest_LOG_LEVEL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogMessage::LogRequest_LOG_LEVEL>() {
  return ::LogMessage::LogRequest_LOG_LEVEL_descriptor();
}
template <> struct is_proto_enum< ::LogMessage::LogResponse_RESP_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogMessage::LogResponse_RESP_STATUS>() {
  return ::LogMessage::LogResponse_RESP_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_LogMessage_2eproto
