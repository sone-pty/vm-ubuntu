// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/LogMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2fLogMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2fLogMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2fLogMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2fLogMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2fLogMessage_2eproto;
namespace LogMessage {
class LogRequest;
struct LogRequestDefaultTypeInternal;
extern LogRequestDefaultTypeInternal _LogRequest_default_instance_;
class LogResponse;
struct LogResponseDefaultTypeInternal;
extern LogResponseDefaultTypeInternal _LogResponse_default_instance_;
}  // namespace LogMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::LogMessage::LogRequest* Arena::CreateMaybeMessage<::LogMessage::LogRequest>(Arena*);
template<> ::LogMessage::LogResponse* Arena::CreateMaybeMessage<::LogMessage::LogResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LogMessage {

enum LogRequest_LOG_LEVEL : int {
  LogRequest_LOG_LEVEL_TRACE = 0,
  LogRequest_LOG_LEVEL_DEBUG = 1,
  LogRequest_LOG_LEVEL_INFO = 2,
  LogRequest_LOG_LEVEL_WARN = 3,
  LogRequest_LOG_LEVEL_ERROR = 4,
  LogRequest_LOG_LEVEL_FATAL = 5,
  LogRequest_LOG_LEVEL_LogRequest_LOG_LEVEL_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogRequest_LOG_LEVEL_LogRequest_LOG_LEVEL_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogRequest_LOG_LEVEL_IsValid(int value);
constexpr LogRequest_LOG_LEVEL LogRequest_LOG_LEVEL_LOG_LEVEL_MIN = LogRequest_LOG_LEVEL_TRACE;
constexpr LogRequest_LOG_LEVEL LogRequest_LOG_LEVEL_LOG_LEVEL_MAX = LogRequest_LOG_LEVEL_FATAL;
constexpr int LogRequest_LOG_LEVEL_LOG_LEVEL_ARRAYSIZE = LogRequest_LOG_LEVEL_LOG_LEVEL_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogRequest_LOG_LEVEL_descriptor();
template<typename T>
inline const std::string& LogRequest_LOG_LEVEL_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogRequest_LOG_LEVEL>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogRequest_LOG_LEVEL_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogRequest_LOG_LEVEL_descriptor(), enum_t_value);
}
inline bool LogRequest_LOG_LEVEL_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogRequest_LOG_LEVEL* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogRequest_LOG_LEVEL>(
    LogRequest_LOG_LEVEL_descriptor(), name, value);
}
enum LogResponse_RESP_STATUS : int {
  LogResponse_RESP_STATUS_OK = 0,
  LogResponse_RESP_STATUS_ERROR = 1,
  LogResponse_RESP_STATUS_LogResponse_RESP_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogResponse_RESP_STATUS_LogResponse_RESP_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogResponse_RESP_STATUS_IsValid(int value);
constexpr LogResponse_RESP_STATUS LogResponse_RESP_STATUS_RESP_STATUS_MIN = LogResponse_RESP_STATUS_OK;
constexpr LogResponse_RESP_STATUS LogResponse_RESP_STATUS_RESP_STATUS_MAX = LogResponse_RESP_STATUS_ERROR;
constexpr int LogResponse_RESP_STATUS_RESP_STATUS_ARRAYSIZE = LogResponse_RESP_STATUS_RESP_STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogResponse_RESP_STATUS_descriptor();
template<typename T>
inline const std::string& LogResponse_RESP_STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogResponse_RESP_STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogResponse_RESP_STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogResponse_RESP_STATUS_descriptor(), enum_t_value);
}
inline bool LogResponse_RESP_STATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogResponse_RESP_STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogResponse_RESP_STATUS>(
    LogResponse_RESP_STATUS_descriptor(), name, value);
}
// ===================================================================

class LogRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogMessage.LogRequest) */ {
 public:
  inline LogRequest() : LogRequest(nullptr) {}
  ~LogRequest() override;
  explicit constexpr LogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogRequest(const LogRequest& from);
  LogRequest(LogRequest&& from) noexcept
    : LogRequest() {
    *this = ::std::move(from);
  }

  inline LogRequest& operator=(const LogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRequest& operator=(LogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequest*>(
               &_LogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogRequest& a, LogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRequest* New() const final {
    return new LogRequest();
  }

  LogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogMessage.LogRequest";
  }
  protected:
  explicit LogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogRequest_LOG_LEVEL LOG_LEVEL;
  static constexpr LOG_LEVEL TRACE =
    LogRequest_LOG_LEVEL_TRACE;
  static constexpr LOG_LEVEL DEBUG =
    LogRequest_LOG_LEVEL_DEBUG;
  static constexpr LOG_LEVEL INFO =
    LogRequest_LOG_LEVEL_INFO;
  static constexpr LOG_LEVEL WARN =
    LogRequest_LOG_LEVEL_WARN;
  static constexpr LOG_LEVEL ERROR =
    LogRequest_LOG_LEVEL_ERROR;
  static constexpr LOG_LEVEL FATAL =
    LogRequest_LOG_LEVEL_FATAL;
  static inline bool LOG_LEVEL_IsValid(int value) {
    return LogRequest_LOG_LEVEL_IsValid(value);
  }
  static constexpr LOG_LEVEL LOG_LEVEL_MIN =
    LogRequest_LOG_LEVEL_LOG_LEVEL_MIN;
  static constexpr LOG_LEVEL LOG_LEVEL_MAX =
    LogRequest_LOG_LEVEL_LOG_LEVEL_MAX;
  static constexpr int LOG_LEVEL_ARRAYSIZE =
    LogRequest_LOG_LEVEL_LOG_LEVEL_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LOG_LEVEL_descriptor() {
    return LogRequest_LOG_LEVEL_descriptor();
  }
  template<typename T>
  static inline const std::string& LOG_LEVEL_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LOG_LEVEL>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LOG_LEVEL_Name.");
    return LogRequest_LOG_LEVEL_Name(enum_t_value);
  }
  static inline bool LOG_LEVEL_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LOG_LEVEL* value) {
    return LogRequest_LOG_LEVEL_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .LogMessage.LogRequest.LOG_LEVEL level = 1;
  void clear_level();
  ::LogMessage::LogRequest_LOG_LEVEL level() const;
  void set_level(::LogMessage::LogRequest_LOG_LEVEL value);
  private:
  ::LogMessage::LogRequest_LOG_LEVEL _internal_level() const;
  void _internal_set_level(::LogMessage::LogRequest_LOG_LEVEL value);
  public:

  // @@protoc_insertion_point(class_scope:LogMessage.LogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2fLogMessage_2eproto;
};
// -------------------------------------------------------------------

class LogResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogMessage.LogResponse) */ {
 public:
  inline LogResponse() : LogResponse(nullptr) {}
  ~LogResponse() override;
  explicit constexpr LogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogResponse(const LogResponse& from);
  LogResponse(LogResponse&& from) noexcept
    : LogResponse() {
    *this = ::std::move(from);
  }

  inline LogResponse& operator=(const LogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogResponse& operator=(LogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogResponse* internal_default_instance() {
    return reinterpret_cast<const LogResponse*>(
               &_LogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogResponse& a, LogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogResponse* New() const final {
    return new LogResponse();
  }

  LogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogMessage.LogResponse";
  }
  protected:
  explicit LogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogResponse_RESP_STATUS RESP_STATUS;
  static constexpr RESP_STATUS OK =
    LogResponse_RESP_STATUS_OK;
  static constexpr RESP_STATUS ERROR =
    LogResponse_RESP_STATUS_ERROR;
  static inline bool RESP_STATUS_IsValid(int value) {
    return LogResponse_RESP_STATUS_IsValid(value);
  }
  static constexpr RESP_STATUS RESP_STATUS_MIN =
    LogResponse_RESP_STATUS_RESP_STATUS_MIN;
  static constexpr RESP_STATUS RESP_STATUS_MAX =
    LogResponse_RESP_STATUS_RESP_STATUS_MAX;
  static constexpr int RESP_STATUS_ARRAYSIZE =
    LogResponse_RESP_STATUS_RESP_STATUS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RESP_STATUS_descriptor() {
    return LogResponse_RESP_STATUS_descriptor();
  }
  template<typename T>
  static inline const std::string& RESP_STATUS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RESP_STATUS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RESP_STATUS_Name.");
    return LogResponse_RESP_STATUS_Name(enum_t_value);
  }
  static inline bool RESP_STATUS_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RESP_STATUS* value) {
    return LogResponse_RESP_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .LogMessage.LogResponse.RESP_STATUS status = 1;
  void clear_status();
  ::LogMessage::LogResponse_RESP_STATUS status() const;
  void set_status(::LogMessage::LogResponse_RESP_STATUS value);
  private:
  ::LogMessage::LogResponse_RESP_STATUS _internal_status() const;
  void _internal_set_status(::LogMessage::LogResponse_RESP_STATUS value);
  public:

  // @@protoc_insertion_point(class_scope:LogMessage.LogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2fLogMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogRequest

// .LogMessage.LogRequest.LOG_LEVEL level = 1;
inline void LogRequest::clear_level() {
  level_ = 0;
}
inline ::LogMessage::LogRequest_LOG_LEVEL LogRequest::_internal_level() const {
  return static_cast< ::LogMessage::LogRequest_LOG_LEVEL >(level_);
}
inline ::LogMessage::LogRequest_LOG_LEVEL LogRequest::level() const {
  // @@protoc_insertion_point(field_get:LogMessage.LogRequest.level)
  return _internal_level();
}
inline void LogRequest::_internal_set_level(::LogMessage::LogRequest_LOG_LEVEL value) {
  
  level_ = value;
}
inline void LogRequest::set_level(::LogMessage::LogRequest_LOG_LEVEL value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:LogMessage.LogRequest.level)
}

// string content = 2;
inline void LogRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& LogRequest::content() const {
  // @@protoc_insertion_point(field_get:LogMessage.LogRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LogMessage.LogRequest.content)
}
inline std::string* LogRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:LogMessage.LogRequest.content)
  return _s;
}
inline const std::string& LogRequest::_internal_content() const {
  return content_.Get();
}
inline void LogRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogRequest::release_content() {
  // @@protoc_insertion_point(field_release:LogMessage.LogRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:LogMessage.LogRequest.content)
}

// -------------------------------------------------------------------

// LogResponse

// .LogMessage.LogResponse.RESP_STATUS status = 1;
inline void LogResponse::clear_status() {
  status_ = 0;
}
inline ::LogMessage::LogResponse_RESP_STATUS LogResponse::_internal_status() const {
  return static_cast< ::LogMessage::LogResponse_RESP_STATUS >(status_);
}
inline ::LogMessage::LogResponse_RESP_STATUS LogResponse::status() const {
  // @@protoc_insertion_point(field_get:LogMessage.LogResponse.status)
  return _internal_status();
}
inline void LogResponse::_internal_set_status(::LogMessage::LogResponse_RESP_STATUS value) {
  
  status_ = value;
}
inline void LogResponse::set_status(::LogMessage::LogResponse_RESP_STATUS value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:LogMessage.LogResponse.status)
}

// string reason = 2;
inline void LogResponse::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& LogResponse::reason() const {
  // @@protoc_insertion_point(field_get:LogMessage.LogResponse.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogResponse::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LogMessage.LogResponse.reason)
}
inline std::string* LogResponse::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:LogMessage.LogResponse.reason)
  return _s;
}
inline const std::string& LogResponse::_internal_reason() const {
  return reason_.Get();
}
inline void LogResponse::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogResponse::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogResponse::release_reason() {
  // @@protoc_insertion_point(field_release:LogMessage.LogResponse.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:LogMessage.LogResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LogMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LogMessage::LogRequest_LOG_LEVEL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogMessage::LogRequest_LOG_LEVEL>() {
  return ::LogMessage::LogRequest_LOG_LEVEL_descriptor();
}
template <> struct is_proto_enum< ::LogMessage::LogResponse_RESP_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogMessage::LogResponse_RESP_STATUS>() {
  return ::LogMessage::LogResponse_RESP_STATUS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2fLogMessage_2eproto
